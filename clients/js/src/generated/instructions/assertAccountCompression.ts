/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  LogLevel,
  LogLevelArgs,
  getLogLevelDecoder,
  getLogLevelEncoder,
} from '../types';

export type AssertAccountCompressionInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountRoot extends string | IAccountMeta<string> = string,
  TAccountSplAccountCompression extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMerkleTree extends string
        ? ReadonlyAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountRoot extends string
        ? ReadonlyAccount<TAccountRoot>
        : TAccountRoot,
      TAccountSplAccountCompression extends string
        ? ReadonlyAccount<TAccountSplAccountCompression>
        : TAccountSplAccountCompression,
      ...TRemainingAccounts
    ]
  >;

export type AssertAccountCompressionInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountRoot extends string | IAccountMeta<string> = string,
  TAccountSplAccountCompression extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMerkleTree extends string
        ? ReadonlyAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountRoot extends string
        ? ReadonlyAccount<TAccountRoot>
        : TAccountRoot,
      TAccountSplAccountCompression extends string
        ? ReadonlyAccount<TAccountSplAccountCompression>
        : TAccountSplAccountCompression,
      ...TRemainingAccounts
    ]
  >;

export type AssertAccountCompressionInstructionData = {
  discriminator: number;
  arg0: LogLevel;
  leafIndex: number;
  leafHash: Uint8Array;
};

export type AssertAccountCompressionInstructionDataArgs = {
  arg0: LogLevelArgs;
  leafIndex: number;
  leafHash: Uint8Array;
};

export function getAssertAccountCompressionInstructionDataEncoder(): Encoder<AssertAccountCompressionInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['arg0', getLogLevelEncoder()],
      ['leafIndex', getU32Encoder()],
      ['leafHash', getBytesEncoder({ size: 32 })],
    ]),
    (value) => ({ ...value, discriminator: 12 })
  );
}

export function getAssertAccountCompressionInstructionDataDecoder(): Decoder<AssertAccountCompressionInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['arg0', getLogLevelDecoder()],
    ['leafIndex', getU32Decoder()],
    ['leafHash', getBytesDecoder({ size: 32 })],
  ]);
}

export function getAssertAccountCompressionInstructionDataCodec(): Codec<
  AssertAccountCompressionInstructionDataArgs,
  AssertAccountCompressionInstructionData
> {
  return combineCodec(
    getAssertAccountCompressionInstructionDataEncoder(),
    getAssertAccountCompressionInstructionDataDecoder()
  );
}

export type AssertAccountCompressionInput<
  TAccountMerkleTree extends string,
  TAccountRoot extends string,
  TAccountSplAccountCompression extends string
> = {
  /** Merkle tree account */
  merkleTree: Address<TAccountMerkleTree>;
  /** Root account */
  root: Address<TAccountRoot>;
  /** SPL account compression program */
  splAccountCompression: Address<TAccountSplAccountCompression>;
  arg0: AssertAccountCompressionInstructionDataArgs['arg0'];
  leafIndex: AssertAccountCompressionInstructionDataArgs['leafIndex'];
  leafHash: AssertAccountCompressionInstructionDataArgs['leafHash'];
};

export type AssertAccountCompressionInputWithSigners<
  TAccountMerkleTree extends string,
  TAccountRoot extends string,
  TAccountSplAccountCompression extends string
> = {
  /** Merkle tree account */
  merkleTree: Address<TAccountMerkleTree>;
  /** Root account */
  root: Address<TAccountRoot>;
  /** SPL account compression program */
  splAccountCompression: Address<TAccountSplAccountCompression>;
  arg0: AssertAccountCompressionInstructionDataArgs['arg0'];
  leafIndex: AssertAccountCompressionInstructionDataArgs['leafIndex'];
  leafHash: AssertAccountCompressionInstructionDataArgs['leafHash'];
};

export function getAssertAccountCompressionInstruction<
  TAccountMerkleTree extends string,
  TAccountRoot extends string,
  TAccountSplAccountCompression extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountCompressionInputWithSigners<
    TAccountMerkleTree,
    TAccountRoot,
    TAccountSplAccountCompression
  >
): AssertAccountCompressionInstructionWithSigners<
  TProgram,
  TAccountMerkleTree,
  TAccountRoot,
  TAccountSplAccountCompression
>;
export function getAssertAccountCompressionInstruction<
  TAccountMerkleTree extends string,
  TAccountRoot extends string,
  TAccountSplAccountCompression extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountCompressionInput<
    TAccountMerkleTree,
    TAccountRoot,
    TAccountSplAccountCompression
  >
): AssertAccountCompressionInstruction<
  TProgram,
  TAccountMerkleTree,
  TAccountRoot,
  TAccountSplAccountCompression
>;
export function getAssertAccountCompressionInstruction<
  TAccountMerkleTree extends string,
  TAccountRoot extends string,
  TAccountSplAccountCompression extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountCompressionInput<
    TAccountMerkleTree,
    TAccountRoot,
    TAccountSplAccountCompression
  >
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssertAccountCompressionInstructionRaw<
      TProgram,
      TAccountMerkleTree,
      TAccountRoot,
      TAccountSplAccountCompression
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    merkleTree: { value: input.merkleTree ?? null, isWritable: false },
    root: { value: input.root ?? null, isWritable: false },
    splAccountCompression: {
      value: input.splAccountCompression ?? null,
      isWritable: false,
    },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssertAccountCompressionInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssertAccountCompressionInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssertAccountCompressionInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMerkleTree extends string | IAccountMeta<string> = string,
  TAccountRoot extends string | IAccountMeta<string> = string,
  TAccountSplAccountCompression extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    merkleTree: TAccountMerkleTree extends string
      ? Address<TAccountMerkleTree>
      : TAccountMerkleTree;
    root: TAccountRoot extends string ? Address<TAccountRoot> : TAccountRoot;
    splAccountCompression: TAccountSplAccountCompression extends string
      ? Address<TAccountSplAccountCompression>
      : TAccountSplAccountCompression;
  },
  args: AssertAccountCompressionInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.merkleTree, AccountRole.READONLY),
      accountMetaWithDefault(accounts.root, AccountRole.READONLY),
      accountMetaWithDefault(
        accounts.splAccountCompression,
        AccountRole.READONLY
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getAssertAccountCompressionInstructionDataEncoder().encode(args),
    programAddress,
  } as AssertAccountCompressionInstruction<
    TProgram,
    TAccountMerkleTree,
    TAccountRoot,
    TAccountSplAccountCompression,
    TRemainingAccounts
  >;
}

export type ParsedAssertAccountCompressionInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Merkle tree account */
    merkleTree: TAccountMetas[0];
    /** Root account */
    root: TAccountMetas[1];
    /** SPL account compression program */
    splAccountCompression: TAccountMetas[2];
  };
  data: AssertAccountCompressionInstructionData;
};

export function parseAssertAccountCompressionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertAccountCompressionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      merkleTree: getNextAccount(),
      root: getNextAccount(),
      splAccountCompression: getNextAccount(),
    },
    data: getAssertAccountCompressionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
