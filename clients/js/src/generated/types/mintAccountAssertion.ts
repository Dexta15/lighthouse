/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getBooleanDecoder,
  getBooleanEncoder,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  ComparableOperator,
  ComparableOperatorArgs,
  EquatableOperator,
  EquatableOperatorArgs,
  getComparableOperatorDecoder,
  getComparableOperatorEncoder,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
} from '.';

export type MintAccountAssertion =
  | { __kind: 'MintAuthority'; fields: [Option<Address>, EquatableOperator] }
  | { __kind: 'Supply'; fields: [bigint, ComparableOperator] }
  | { __kind: 'Decimals'; fields: [number, ComparableOperator] }
  | { __kind: 'IsInitialized'; fields: [boolean, EquatableOperator] }
  | { __kind: 'FreezeAuthority'; fields: [Option<Address>, EquatableOperator] };

export type MintAccountAssertionArgs =
  | {
      __kind: 'MintAuthority';
      fields: [OptionOrNullable<Address>, EquatableOperatorArgs];
    }
  | { __kind: 'Supply'; fields: [number | bigint, ComparableOperatorArgs] }
  | { __kind: 'Decimals'; fields: [number, ComparableOperatorArgs] }
  | { __kind: 'IsInitialized'; fields: [boolean, EquatableOperatorArgs] }
  | {
      __kind: 'FreezeAuthority';
      fields: [OptionOrNullable<Address>, EquatableOperatorArgs];
    };

export function getMintAccountAssertionEncoder(): Encoder<MintAccountAssertionArgs> {
  return getDataEnumEncoder([
    [
      'MintAuthority',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getOptionEncoder(getAddressEncoder()),
            getEquatableOperatorEncoder(),
          ]),
        ],
      ]),
    ],
    [
      'Supply',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Decimals',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU8Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'IsInitialized',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getBooleanEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'FreezeAuthority',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getOptionEncoder(getAddressEncoder()),
            getEquatableOperatorEncoder(),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getMintAccountAssertionDecoder(): Decoder<MintAccountAssertion> {
  return getDataEnumDecoder([
    [
      'MintAuthority',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getOptionDecoder(getAddressDecoder()),
            getEquatableOperatorDecoder(),
          ]),
        ],
      ]),
    ],
    [
      'Supply',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Decimals',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU8Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'IsInitialized',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getBooleanDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'FreezeAuthority',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getOptionDecoder(getAddressDecoder()),
            getEquatableOperatorDecoder(),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getMintAccountAssertionCodec(): Codec<
  MintAccountAssertionArgs,
  MintAccountAssertion
> {
  return combineCodec(
    getMintAccountAssertionEncoder(),
    getMintAccountAssertionDecoder()
  );
}

// Data Enum Helpers.
export function mintAccountAssertion(
  kind: 'MintAuthority',
  data: GetDataEnumKindContent<
    MintAccountAssertionArgs,
    'MintAuthority'
  >['fields']
): GetDataEnumKind<MintAccountAssertionArgs, 'MintAuthority'>;
export function mintAccountAssertion(
  kind: 'Supply',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'Supply'>['fields']
): GetDataEnumKind<MintAccountAssertionArgs, 'Supply'>;
export function mintAccountAssertion(
  kind: 'Decimals',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'Decimals'>['fields']
): GetDataEnumKind<MintAccountAssertionArgs, 'Decimals'>;
export function mintAccountAssertion(
  kind: 'IsInitialized',
  data: GetDataEnumKindContent<
    MintAccountAssertionArgs,
    'IsInitialized'
  >['fields']
): GetDataEnumKind<MintAccountAssertionArgs, 'IsInitialized'>;
export function mintAccountAssertion(
  kind: 'FreezeAuthority',
  data: GetDataEnumKindContent<
    MintAccountAssertionArgs,
    'FreezeAuthority'
  >['fields']
): GetDataEnumKind<MintAccountAssertionArgs, 'FreezeAuthority'>;
export function mintAccountAssertion<
  K extends MintAccountAssertionArgs['__kind']
>(kind: K, data?: any): Extract<MintAccountAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isMintAccountAssertion<
  K extends MintAccountAssertion['__kind']
>(
  kind: K,
  value: MintAccountAssertion
): value is MintAccountAssertion & { __kind: K } {
  return value.__kind === kind;
}
