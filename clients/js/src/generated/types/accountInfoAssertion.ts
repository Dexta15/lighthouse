/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import {
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  ComparableOperator,
  ComparableOperatorArgs,
  EquatableOperator,
  EquatableOperatorArgs,
  KnownProgram,
  KnownProgramArgs,
  getComparableOperatorDecoder,
  getComparableOperatorEncoder,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getKnownProgramDecoder,
  getKnownProgramEncoder,
} from '.';

export type AccountInfoAssertion =
  | { __kind: 'Key'; fields: [Address, EquatableOperator] }
  | { __kind: 'Lamports'; fields: [bigint, ComparableOperator] }
  | { __kind: 'DataLength'; fields: [bigint, ComparableOperator] }
  | { __kind: 'Owner'; fields: [Address, EquatableOperator] }
  | { __kind: 'KnownOwner'; fields: [KnownProgram, EquatableOperator] }
  | { __kind: 'RentEpoch'; fields: [bigint, ComparableOperator] }
  | { __kind: 'IsSigner'; fields: [boolean, EquatableOperator] }
  | { __kind: 'IsWritable'; fields: [boolean, EquatableOperator] }
  | { __kind: 'Executable'; fields: [boolean, EquatableOperator] }
  | {
      __kind: 'VerifyDatahash';
      fields: [Uint8Array, Option<number>, Option<number>];
    };

export type AccountInfoAssertionArgs =
  | { __kind: 'Key'; fields: [Address, EquatableOperatorArgs] }
  | { __kind: 'Lamports'; fields: [number | bigint, ComparableOperatorArgs] }
  | { __kind: 'DataLength'; fields: [number | bigint, ComparableOperatorArgs] }
  | { __kind: 'Owner'; fields: [Address, EquatableOperatorArgs] }
  | { __kind: 'KnownOwner'; fields: [KnownProgramArgs, EquatableOperatorArgs] }
  | { __kind: 'RentEpoch'; fields: [number | bigint, ComparableOperatorArgs] }
  | { __kind: 'IsSigner'; fields: [boolean, EquatableOperatorArgs] }
  | { __kind: 'IsWritable'; fields: [boolean, EquatableOperatorArgs] }
  | { __kind: 'Executable'; fields: [boolean, EquatableOperatorArgs] }
  | {
      __kind: 'VerifyDatahash';
      fields: [Uint8Array, OptionOrNullable<number>, OptionOrNullable<number>];
    };

export function getAccountInfoAssertionEncoder(): Encoder<AccountInfoAssertionArgs> {
  return getDataEnumEncoder([
    [
      'Key',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getAddressEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Lamports',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'DataLength',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Owner',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getAddressEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'KnownOwner',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getKnownProgramEncoder(),
            getEquatableOperatorEncoder(),
          ]),
        ],
      ]),
    ],
    [
      'RentEpoch',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'IsSigner',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getBooleanEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'IsWritable',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getBooleanEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Executable',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getBooleanEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'VerifyDatahash',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getBytesEncoder({ size: 32 }),
            getOptionEncoder(getU16Encoder()),
            getOptionEncoder(getU16Encoder()),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getAccountInfoAssertionDecoder(): Decoder<AccountInfoAssertion> {
  return getDataEnumDecoder([
    [
      'Key',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getAddressDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Lamports',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'DataLength',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Owner',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getAddressDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'KnownOwner',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getKnownProgramDecoder(),
            getEquatableOperatorDecoder(),
          ]),
        ],
      ]),
    ],
    [
      'RentEpoch',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'IsSigner',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getBooleanDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'IsWritable',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getBooleanDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Executable',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getBooleanDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'VerifyDatahash',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getBytesDecoder({ size: 32 }),
            getOptionDecoder(getU16Decoder()),
            getOptionDecoder(getU16Decoder()),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getAccountInfoAssertionCodec(): Codec<
  AccountInfoAssertionArgs,
  AccountInfoAssertion
> {
  return combineCodec(
    getAccountInfoAssertionEncoder(),
    getAccountInfoAssertionDecoder()
  );
}

// Data Enum Helpers.
export function accountInfoAssertion(
  kind: 'Key',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Key'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'Key'>;
export function accountInfoAssertion(
  kind: 'Lamports',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Lamports'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'Lamports'>;
export function accountInfoAssertion(
  kind: 'DataLength',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'DataLength'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'DataLength'>;
export function accountInfoAssertion(
  kind: 'Owner',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Owner'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'Owner'>;
export function accountInfoAssertion(
  kind: 'KnownOwner',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'KnownOwner'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'KnownOwner'>;
export function accountInfoAssertion(
  kind: 'RentEpoch',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'RentEpoch'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'RentEpoch'>;
export function accountInfoAssertion(
  kind: 'IsSigner',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'IsSigner'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'IsSigner'>;
export function accountInfoAssertion(
  kind: 'IsWritable',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'IsWritable'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'IsWritable'>;
export function accountInfoAssertion(
  kind: 'Executable',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Executable'>['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'Executable'>;
export function accountInfoAssertion(
  kind: 'VerifyDatahash',
  data: GetDataEnumKindContent<
    AccountInfoAssertionArgs,
    'VerifyDatahash'
  >['fields']
): GetDataEnumKind<AccountInfoAssertionArgs, 'VerifyDatahash'>;
export function accountInfoAssertion<
  K extends AccountInfoAssertionArgs['__kind']
>(kind: K, data?: any): Extract<AccountInfoAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isAccountInfoAssertion<
  K extends AccountInfoAssertion['__kind']
>(
  kind: K,
  value: AccountInfoAssertion
): value is AccountInfoAssertion & { __kind: K } {
  return value.__kind === kind;
}
