/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import {
  getI128Decoder,
  getI128Encoder,
  getI16Decoder,
  getI16Encoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
} from '@solana/codecs-numbers';
import {
  IntegerOperator,
  IntegerOperatorArgs,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '.';

export type DataValueDiffAssertion =
  | { __kind: 'U8'; fields: [number, IntegerOperator] }
  | { __kind: 'I8'; fields: [number, IntegerOperator] }
  | { __kind: 'U16'; fields: [number, IntegerOperator] }
  | { __kind: 'I16'; fields: [number, IntegerOperator] }
  | { __kind: 'U32'; fields: [bigint, IntegerOperator] }
  | { __kind: 'I32'; fields: [bigint, IntegerOperator] }
  | { __kind: 'U64'; fields: [bigint, IntegerOperator] }
  | { __kind: 'I64'; fields: [bigint, IntegerOperator] };

export type DataValueDiffAssertionArgs =
  | { __kind: 'U8'; fields: [number, IntegerOperatorArgs] }
  | { __kind: 'I8'; fields: [number, IntegerOperatorArgs] }
  | { __kind: 'U16'; fields: [number, IntegerOperatorArgs] }
  | { __kind: 'I16'; fields: [number, IntegerOperatorArgs] }
  | { __kind: 'U32'; fields: [number | bigint, IntegerOperatorArgs] }
  | { __kind: 'I32'; fields: [number | bigint, IntegerOperatorArgs] }
  | { __kind: 'U64'; fields: [number | bigint, IntegerOperatorArgs] }
  | { __kind: 'I64'; fields: [number | bigint, IntegerOperatorArgs] };

export function getDataValueDiffAssertionEncoder(): Encoder<DataValueDiffAssertionArgs> {
  return getDataEnumEncoder([
    [
      'U8',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI16Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'I8',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI16Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'U16',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI32Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'I16',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI32Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'U32',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI64Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'I32',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI64Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'U64',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI128Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'I64',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getI128Encoder(), getIntegerOperatorEncoder()]),
        ],
      ]),
    ],
  ]);
}

export function getDataValueDiffAssertionDecoder(): Decoder<DataValueDiffAssertion> {
  return getDataEnumDecoder([
    [
      'U8',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI16Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'I8',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI16Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'U16',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI32Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'I16',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI32Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'U32',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI64Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'I32',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI64Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'U64',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI128Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'I64',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getI128Decoder(), getIntegerOperatorDecoder()]),
        ],
      ]),
    ],
  ]);
}

export function getDataValueDiffAssertionCodec(): Codec<
  DataValueDiffAssertionArgs,
  DataValueDiffAssertion
> {
  return combineCodec(
    getDataValueDiffAssertionEncoder(),
    getDataValueDiffAssertionDecoder()
  );
}

// Data Enum Helpers.
export function dataValueDiffAssertion(
  kind: 'U8',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'U8'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'U8'>;
export function dataValueDiffAssertion(
  kind: 'I8',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'I8'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'I8'>;
export function dataValueDiffAssertion(
  kind: 'U16',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'U16'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'U16'>;
export function dataValueDiffAssertion(
  kind: 'I16',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'I16'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'I16'>;
export function dataValueDiffAssertion(
  kind: 'U32',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'U32'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'U32'>;
export function dataValueDiffAssertion(
  kind: 'I32',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'I32'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'I32'>;
export function dataValueDiffAssertion(
  kind: 'U64',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'U64'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'U64'>;
export function dataValueDiffAssertion(
  kind: 'I64',
  data: GetDataEnumKindContent<DataValueDiffAssertionArgs, 'I64'>['fields']
): GetDataEnumKind<DataValueDiffAssertionArgs, 'I64'>;
export function dataValueDiffAssertion<
  K extends DataValueDiffAssertionArgs['__kind']
>(kind: K, data?: any): Extract<DataValueDiffAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isDataValueDiffAssertion<
  K extends DataValueDiffAssertion['__kind']
>(
  kind: K,
  value: DataValueDiffAssertion
): value is DataValueDiffAssertion & { __kind: K } {
  return value.__kind === kind;
}
