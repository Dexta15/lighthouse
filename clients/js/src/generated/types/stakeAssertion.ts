/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import {
  ComparableOperator,
  ComparableOperatorArgs,
  EquatableOperator,
  EquatableOperatorArgs,
  getComparableOperatorDecoder,
  getComparableOperatorEncoder,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
} from '.';

export type StakeAssertion =
  | { __kind: 'DelegationVoterPubkey'; fields: [Address, EquatableOperator] }
  | { __kind: 'DelegationStake'; fields: [bigint, ComparableOperator] }
  | {
      __kind: 'DelegationActivationEpoch';
      fields: [bigint, ComparableOperator];
    }
  | {
      __kind: 'DelegationDeactivationEpoch';
      fields: [bigint, ComparableOperator];
    }
  | { __kind: 'CreditsObserved'; fields: [bigint, ComparableOperator] };

export type StakeAssertionArgs =
  | {
      __kind: 'DelegationVoterPubkey';
      fields: [Address, EquatableOperatorArgs];
    }
  | {
      __kind: 'DelegationStake';
      fields: [number | bigint, ComparableOperatorArgs];
    }
  | {
      __kind: 'DelegationActivationEpoch';
      fields: [number | bigint, ComparableOperatorArgs];
    }
  | {
      __kind: 'DelegationDeactivationEpoch';
      fields: [number | bigint, ComparableOperatorArgs];
    }
  | {
      __kind: 'CreditsObserved';
      fields: [number | bigint, ComparableOperatorArgs];
    };

export function getStakeAssertionEncoder(): Encoder<StakeAssertionArgs> {
  return getDataEnumEncoder([
    [
      'DelegationVoterPubkey',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getAddressEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'DelegationStake',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'DelegationActivationEpoch',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'DelegationDeactivationEpoch',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'CreditsObserved',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
  ]);
}

export function getStakeAssertionDecoder(): Decoder<StakeAssertion> {
  return getDataEnumDecoder([
    [
      'DelegationVoterPubkey',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getAddressDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'DelegationStake',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'DelegationActivationEpoch',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'DelegationDeactivationEpoch',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'CreditsObserved',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
  ]);
}

export function getStakeAssertionCodec(): Codec<
  StakeAssertionArgs,
  StakeAssertion
> {
  return combineCodec(getStakeAssertionEncoder(), getStakeAssertionDecoder());
}

// Data Enum Helpers.
export function stakeAssertion(
  kind: 'DelegationVoterPubkey',
  data: GetDataEnumKindContent<
    StakeAssertionArgs,
    'DelegationVoterPubkey'
  >['fields']
): GetDataEnumKind<StakeAssertionArgs, 'DelegationVoterPubkey'>;
export function stakeAssertion(
  kind: 'DelegationStake',
  data: GetDataEnumKindContent<StakeAssertionArgs, 'DelegationStake'>['fields']
): GetDataEnumKind<StakeAssertionArgs, 'DelegationStake'>;
export function stakeAssertion(
  kind: 'DelegationActivationEpoch',
  data: GetDataEnumKindContent<
    StakeAssertionArgs,
    'DelegationActivationEpoch'
  >['fields']
): GetDataEnumKind<StakeAssertionArgs, 'DelegationActivationEpoch'>;
export function stakeAssertion(
  kind: 'DelegationDeactivationEpoch',
  data: GetDataEnumKindContent<
    StakeAssertionArgs,
    'DelegationDeactivationEpoch'
  >['fields']
): GetDataEnumKind<StakeAssertionArgs, 'DelegationDeactivationEpoch'>;
export function stakeAssertion(
  kind: 'CreditsObserved',
  data: GetDataEnumKindContent<StakeAssertionArgs, 'CreditsObserved'>['fields']
): GetDataEnumKind<StakeAssertionArgs, 'CreditsObserved'>;
export function stakeAssertion<K extends StakeAssertionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<StakeAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isStakeAssertion<K extends StakeAssertion['__kind']>(
  kind: K,
  value: StakeAssertion
): value is StakeAssertion & { __kind: K } {
  return value.__kind === kind;
}
