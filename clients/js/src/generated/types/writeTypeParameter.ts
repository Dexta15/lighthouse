/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  WriteType,
  WriteTypeArgs,
  getWriteTypeDecoder,
  getWriteTypeEncoder,
} from '.';

export type WriteTypeParameter =
  | { __kind: 'WriteU8'; offset: number; writeType: WriteType }
  | { __kind: 'WriteU16'; offset: number; writeType: WriteType }
  | { __kind: 'WriteU32'; offset: number; writeType: WriteType };

export type WriteTypeParameterArgs =
  | { __kind: 'WriteU8'; offset: number; writeType: WriteTypeArgs }
  | { __kind: 'WriteU16'; offset: number; writeType: WriteTypeArgs }
  | { __kind: 'WriteU32'; offset: number; writeType: WriteTypeArgs };

export function getWriteTypeParameterEncoder(): Encoder<WriteTypeParameterArgs> {
  return getDataEnumEncoder([
    [
      'WriteU8',
      getStructEncoder([
        ['offset', getU8Encoder()],
        ['writeType', getWriteTypeEncoder()],
      ]),
    ],
    [
      'WriteU16',
      getStructEncoder([
        ['offset', getU16Encoder()],
        ['writeType', getWriteTypeEncoder()],
      ]),
    ],
    [
      'WriteU32',
      getStructEncoder([
        ['offset', getU32Encoder()],
        ['writeType', getWriteTypeEncoder()],
      ]),
    ],
  ]);
}

export function getWriteTypeParameterDecoder(): Decoder<WriteTypeParameter> {
  return getDataEnumDecoder([
    [
      'WriteU8',
      getStructDecoder([
        ['offset', getU8Decoder()],
        ['writeType', getWriteTypeDecoder()],
      ]),
    ],
    [
      'WriteU16',
      getStructDecoder([
        ['offset', getU16Decoder()],
        ['writeType', getWriteTypeDecoder()],
      ]),
    ],
    [
      'WriteU32',
      getStructDecoder([
        ['offset', getU32Decoder()],
        ['writeType', getWriteTypeDecoder()],
      ]),
    ],
  ]);
}

export function getWriteTypeParameterCodec(): Codec<
  WriteTypeParameterArgs,
  WriteTypeParameter
> {
  return combineCodec(
    getWriteTypeParameterEncoder(),
    getWriteTypeParameterDecoder()
  );
}

// Data Enum Helpers.
export function writeTypeParameter(
  kind: 'WriteU8',
  data: GetDataEnumKindContent<WriteTypeParameterArgs, 'WriteU8'>
): GetDataEnumKind<WriteTypeParameterArgs, 'WriteU8'>;
export function writeTypeParameter(
  kind: 'WriteU16',
  data: GetDataEnumKindContent<WriteTypeParameterArgs, 'WriteU16'>
): GetDataEnumKind<WriteTypeParameterArgs, 'WriteU16'>;
export function writeTypeParameter(
  kind: 'WriteU32',
  data: GetDataEnumKindContent<WriteTypeParameterArgs, 'WriteU32'>
): GetDataEnumKind<WriteTypeParameterArgs, 'WriteU32'>;
export function writeTypeParameter<K extends WriteTypeParameterArgs['__kind']>(
  kind: K,
  data?: any
): Extract<WriteTypeParameterArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isWriteTypeParameter<K extends WriteTypeParameter['__kind']>(
  kind: K,
  value: WriteTypeParameter
): value is WriteTypeParameter & { __kind: K } {
  return value.__kind === kind;
}
