/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  ComparableOperator,
  ComparableOperatorArgs,
  EquatableOperator,
  EquatableOperatorArgs,
  getComparableOperatorDecoder,
  getComparableOperatorEncoder,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
} from '.';

export type TokenAccountAssertion =
  | { __kind: 'Mint'; fields: [Address, EquatableOperator] }
  | { __kind: 'Owner'; fields: [Address, EquatableOperator] }
  | { __kind: 'Amount'; fields: [bigint, ComparableOperator] }
  | { __kind: 'Delegate'; fields: [Option<Address>, EquatableOperator] }
  | { __kind: 'State'; fields: [number, ComparableOperator] }
  | { __kind: 'IsNative'; fields: [Option<bigint>, ComparableOperator] }
  | { __kind: 'DelegatedAmount'; fields: [bigint, ComparableOperator] }
  | { __kind: 'CloseAuthority'; fields: [Option<Address>, EquatableOperator] }
  | { __kind: 'TokenAccountOwnerIsDerived' };

export type TokenAccountAssertionArgs =
  | { __kind: 'Mint'; fields: [Address, EquatableOperatorArgs] }
  | { __kind: 'Owner'; fields: [Address, EquatableOperatorArgs] }
  | { __kind: 'Amount'; fields: [number | bigint, ComparableOperatorArgs] }
  | {
      __kind: 'Delegate';
      fields: [OptionOrNullable<Address>, EquatableOperatorArgs];
    }
  | { __kind: 'State'; fields: [number, ComparableOperatorArgs] }
  | {
      __kind: 'IsNative';
      fields: [OptionOrNullable<number | bigint>, ComparableOperatorArgs];
    }
  | {
      __kind: 'DelegatedAmount';
      fields: [number | bigint, ComparableOperatorArgs];
    }
  | {
      __kind: 'CloseAuthority';
      fields: [OptionOrNullable<Address>, EquatableOperatorArgs];
    }
  | { __kind: 'TokenAccountOwnerIsDerived' };

export function getTokenAccountAssertionEncoder(): Encoder<TokenAccountAssertionArgs> {
  return getDataEnumEncoder([
    [
      'Mint',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getAddressEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Owner',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getAddressEncoder(), getEquatableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Amount',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'Delegate',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getOptionEncoder(getAddressEncoder()),
            getEquatableOperatorEncoder(),
          ]),
        ],
      ]),
    ],
    [
      'State',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU8Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'IsNative',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getOptionEncoder(getU64Encoder()),
            getComparableOperatorEncoder(),
          ]),
        ],
      ]),
    ],
    [
      'DelegatedAmount',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getU64Encoder(), getComparableOperatorEncoder()]),
        ],
      ]),
    ],
    [
      'CloseAuthority',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getOptionEncoder(getAddressEncoder()),
            getEquatableOperatorEncoder(),
          ]),
        ],
      ]),
    ],
    ['TokenAccountOwnerIsDerived', getUnitEncoder()],
  ]);
}

export function getTokenAccountAssertionDecoder(): Decoder<TokenAccountAssertion> {
  return getDataEnumDecoder([
    [
      'Mint',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getAddressDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Owner',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getAddressDecoder(), getEquatableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Amount',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'Delegate',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getOptionDecoder(getAddressDecoder()),
            getEquatableOperatorDecoder(),
          ]),
        ],
      ]),
    ],
    [
      'State',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU8Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'IsNative',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getOptionDecoder(getU64Decoder()),
            getComparableOperatorDecoder(),
          ]),
        ],
      ]),
    ],
    [
      'DelegatedAmount',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getU64Decoder(), getComparableOperatorDecoder()]),
        ],
      ]),
    ],
    [
      'CloseAuthority',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getOptionDecoder(getAddressDecoder()),
            getEquatableOperatorDecoder(),
          ]),
        ],
      ]),
    ],
    ['TokenAccountOwnerIsDerived', getUnitDecoder()],
  ]);
}

export function getTokenAccountAssertionCodec(): Codec<
  TokenAccountAssertionArgs,
  TokenAccountAssertion
> {
  return combineCodec(
    getTokenAccountAssertionEncoder(),
    getTokenAccountAssertionDecoder()
  );
}

// Data Enum Helpers.
export function tokenAccountAssertion(
  kind: 'Mint',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Mint'>['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'Mint'>;
export function tokenAccountAssertion(
  kind: 'Owner',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Owner'>['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'Owner'>;
export function tokenAccountAssertion(
  kind: 'Amount',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Amount'>['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'Amount'>;
export function tokenAccountAssertion(
  kind: 'Delegate',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Delegate'>['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'Delegate'>;
export function tokenAccountAssertion(
  kind: 'State',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'State'>['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'State'>;
export function tokenAccountAssertion(
  kind: 'IsNative',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'IsNative'>['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'IsNative'>;
export function tokenAccountAssertion(
  kind: 'DelegatedAmount',
  data: GetDataEnumKindContent<
    TokenAccountAssertionArgs,
    'DelegatedAmount'
  >['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'DelegatedAmount'>;
export function tokenAccountAssertion(
  kind: 'CloseAuthority',
  data: GetDataEnumKindContent<
    TokenAccountAssertionArgs,
    'CloseAuthority'
  >['fields']
): GetDataEnumKind<TokenAccountAssertionArgs, 'CloseAuthority'>;
export function tokenAccountAssertion(
  kind: 'TokenAccountOwnerIsDerived'
): GetDataEnumKind<TokenAccountAssertionArgs, 'TokenAccountOwnerIsDerived'>;
export function tokenAccountAssertion<
  K extends TokenAccountAssertionArgs['__kind']
>(kind: K, data?: any): Extract<TokenAccountAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isTokenAccountAssertion<
  K extends TokenAccountAssertion['__kind']
>(
  kind: K,
  value: TokenAccountAssertion
): value is TokenAccountAssertion & { __kind: K } {
  return value.__kind === kind;
}
